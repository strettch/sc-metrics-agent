# release.yml - Stable Release Workflow
name: Stable Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options: [patch, minor, major]

env:
  GO_VERSION: '1.25'
  DEBIAN_FRONTEND: noninteractive

jobs:
  validate:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Validate semantic version
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        TYPE="${{ github.event.inputs.release_type }}"
        
        # Validate format
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version format: $VERSION"
          exit 1
        fi
        
        # Check if already exists
        if git tag -l "$VERSION" | grep -q "^$VERSION$"; then
          echo "::error::Version $VERSION already exists"
          exit 1
        fi
        
        # Validate increment
        ./.github/scripts/validate-version.sh "$VERSION" "$TYPE"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "::notice::Validated version: $VERSION"

  release:
    name: Build and Release
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Build binary for ${{ matrix.arch }}
      run: |
        make build \
          VERSION=${{ needs.validate.outputs.version }} \
          GOOS=linux \
          GOARCH=${{ matrix.arch }}
    
    - name: Setup packaging
      if: matrix.arch == 'amd64'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -yqq ruby ruby-dev build-essential rpm
        sudo gem install --no-document fpm
    
    - name: Build packages
      if: matrix.arch == 'amd64'
      run: |
        ./.github/scripts/build-all-packages.sh \
          "${{ needs.validate.outputs.version }}" \
          "stable"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.arch }}
        path: |
          *.deb
          *.rpm
          build/sc-metrics-agent*
        retention-days: 1

  deploy:
    name: Deploy Release
    needs: [validate, release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        {
          echo 'changelog<<EOF'
          .github/scripts/generate-changelog.sh stable
          echo 'EOF'
        } >> $GITHUB_OUTPUT
    
    - name: Deploy to repository
      env:
        DEPLOY_KEY: ${{ secrets.REPO_SSH_KEY }}
        REPO_HOST: ${{ secrets.REPO_HOST }}
        REPO_USER: ${{ secrets.REPO_USER }}
      run: |
        ./.github/scripts/deploy-to-repo.sh \
          "${{ needs.validate.outputs.version }}" \
          "stable" \
          "$DEPLOY_KEY" \
          "$REPO_HOST" \
          "$REPO_USER"
    
    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ needs.validate.outputs.version }}" \
          -m "Release ${{ needs.validate.outputs.version }}"
        git push origin "${{ needs.validate.outputs.version }}"
    
    - name: Create GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.validate.outputs.version }}
        name: "Release v${{ needs.validate.outputs.version }}"
        body: |
          ## âœ… Stable Release
          
          Production-ready release.
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### ðŸ“Š Release Info
          - **Type:** ${{ github.event.inputs.release_type }}
          - **Build:** ${{ github.sha }}
          - **Date:** ${{ github.event.repository.updated_at }}
        artifacts: "dist/**/*"
        token: ${{ secrets.GITHUB_TOKEN }}