name: Stable Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0, 0.1.1, 0.2.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  validate-version:
    name: Validate Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Validate semantic version format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z (e.g., 0.1.0)"
          exit 1
        fi
        
        # Check if version already exists
        if git tag -l | grep -q "^$VERSION$"; then
          echo "Error: Version $VERSION already exists"
          exit 1
        fi
        
        # Get last stable release
        LAST_STABLE=$(git tag -l --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -1 | tr -d '\n' || echo "")
        
        # Sanitize and set default if no stable releases found
        if [ -z "$LAST_STABLE" ] || [ "$LAST_STABLE" = " " ]; then
            LAST_STABLE_CLEAN="0.0.0"
        else
            # Remove any whitespace and validate format
            LAST_STABLE_CLEAN=$(echo "$LAST_STABLE" | tr -d '[:space:]')
            if [[ ! $LAST_STABLE_CLEAN =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                LAST_STABLE_CLEAN="0.0.0"
            fi
        fi
        
        echo "Last stable version: $LAST_STABLE_CLEAN"
        echo "New version: $VERSION"
        echo "Release type: ${{ github.event.inputs.release_type }}"
        
        # Install packaging library
        python3 -m pip install --user packaging
        
        # Validate version increment
        python3 << EOF
        import sys
        from packaging import version
        
        # Sanitize inputs
        last_version = "$LAST_STABLE_CLEAN".strip()
        new_version = "$VERSION".strip()
        release_type = "${{ github.event.inputs.release_type }}".strip()
        
        # Parse versions with error handling
        try:
            last = last_version.split('.')
            last_major, last_minor, last_patch = map(int, last)
        except (ValueError, IndexError):
            print(f"Warning: Could not parse last version '{last_version}', using 0.0.0")
            last_major, last_minor, last_patch = 0, 0, 0
            
        try:
            new = new_version.split('.')
            new_major, new_minor, new_patch = map(int, new)
        except (ValueError, IndexError):
            print(f"Error: Could not parse new version '{new_version}'")
            sys.exit(1)
        
        if release_type == "major":
            expected = f"{last_major + 1}.0.0"
        elif release_type == "minor":
            expected = f"{last_major}.{last_minor + 1}.0"
        else:  # patch
            expected = f"{last_major}.{last_minor}.{last_patch + 1}"
        
        if "$VERSION" != expected:
            print(f"Error: For {release_type} release, expected version {expected}, got $VERSION")
            sys.exit(1)
        
        print(f"Version validation passed: $VERSION is a valid {release_type} release")
        EOF
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  stable-release:
    name: Build and Deploy Stable Release
    runs-on: ubuntu-latest
    needs: validate-version
    permissions:
      contents: write  # Required for creating releases
      actions: read    # Required for downloading artifacts
      checks: read     # Required for status checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: dev
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Generate comprehensive changelog
      id: changelog
      run: |
        chmod +x .github/scripts/generate-changelog.sh
        CHANGELOG=$(.github/scripts/generate-changelog.sh stable)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        VERSION: ${{ needs.validate-version.outputs.version }}
      run: |
        make GOOS=linux GOARCH=amd64 build VERSION=$VERSION

    - name: Install packaging dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev build-essential
        
    - name: Install FPM gem
      run: sudo gem install fpm --no-document

    - name: Build package
      env:
        VERSION: ${{ needs.validate-version.outputs.version }}
      run: |
        # Create staging directory
        STAGING_DIR="/tmp/sc-metrics-agent-build"
        mkdir -p "${STAGING_DIR}/usr/bin" "${STAGING_DIR}/usr/local/bin" "${STAGING_DIR}/etc/sc-metrics-agent" "${STAGING_DIR}/etc/systemd/system"
        
        # Copy files
        cp build/sc-metrics-agent "${STAGING_DIR}/usr/local/bin/"
        cp packaging/scripts/start-sc-metrics-agent.sh "${STAGING_DIR}/usr/local/bin/"
        chmod +x "${STAGING_DIR}/usr/local/bin/start-sc-metrics-agent.sh"
        cp packaging/scripts/sc-metrics-agent-updater.sh "${STAGING_DIR}/usr/bin/"
        chmod +x "${STAGING_DIR}/usr/bin/sc-metrics-agent-updater.sh"
        cp config.example.yaml "${STAGING_DIR}/etc/sc-metrics-agent/config.yaml"
        cp packaging/systemd/sc-metrics-agent.service "${STAGING_DIR}/etc/systemd/system/"
        cp packaging/systemd/sc-metrics-agent-update-scheduler.service "${STAGING_DIR}/etc/systemd/system/"
        cp packaging/systemd/sc-metrics-agent-update-scheduler.timer "${STAGING_DIR}/etc/systemd/system/"
        
        # Build package
        fpm -s dir -t deb -n sc-metrics-agent -v ${VERSION} \
          -C "${STAGING_DIR}/" \
          --description "SC Metrics Agent for system monitoring" \
          --maintainer "engineering@strettch.com" \
          --url "https://github.com/strettch/sc-metrics-agent" \
          --depends "libc6" --depends "dmidecode" \
          --after-install "packaging/scripts/post-install.sh" \
          --before-remove "packaging/scripts/pre-remove.sh"

    - name: Deploy to repository
      env:
        REPO_SSH_KEY: ${{ secrets.REPO_SSH_KEY }}
        REPO_HOST: ${{ secrets.REPO_HOST }}
        REPO_USER: ${{ secrets.REPO_USER }}
      run: |
        chmod +x .github/scripts/deploy-to-repo.sh
        .github/scripts/deploy-to-repo.sh stable sc-metrics-agent_${VERSION}_amd64.deb

    - name: Create Git tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a ${{ needs.validate-version.outputs.version }} -m "Release ${{ needs.validate-version.outputs.version }}"
        git push origin ${{ needs.validate-version.outputs.version }}

    - name: Create GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.validate-version.outputs.version }}
        name: "Release ${{ needs.validate-version.outputs.version }}"
        body: |
          ## Release ${{ needs.validate-version.outputs.version }}
          
          This is a stable release ready for production deployment.
          
          ### Installation
          ```bash
          curl -sSL https://repo.cloud.strettch.com/metrics/install.sh | sudo bash
          ```
          
          ### Changes since last release:
          ${{ steps.changelog.outputs.changelog }}
          
          ### Release Information
          - **Release Type:** ${{ github.event.inputs.release_type }}
          - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit:** ${{ github.sha }}
        artifacts: "sc-metrics-agent_*.deb"
        token: ${{ secrets.GITHUB_TOKEN }}